[{"filePath":"C:\\users\\Komar\\repos\\ponyracer\\src\\app\\register\\register.component.ts","messages":[{"ruleId":"deprecation/deprecation","severity":2,"message":"'group' is deprecated. This API is not typesafe and can result in issues with Closure Compiler renaming.\nUse the `FormBuilder#group` overload with `AbstractControlOptions` instead.\nNote that `AbstractControlOptions` expects `validators` and `asyncValidators` to be valid\nvalidators. If you have custom validators, make sure their validation function parameter is\n`AbstractControl` and not a sub-class, such as `FormGroup`. These functions will be called\nwith an object of type `AbstractControl` and that cannot be automatically downcast to a\nsubclass, so TypeScript sees this as an error. For example, change the `(group: FormGroup) =>\nValidationErrors|null` signature to be `(group: AbstractControl) => ValidationErrors|null`.","line":28,"column":27,"nodeType":"Identifier","messageId":"deprecated","endLine":28,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { UserService } from '../user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'pr-register',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  // Properties of component in general\n  registrationFailed = false;\n\n  // Controls\n  loginCtrl = this.fb.control('', [Validators.required, Validators.minLength(3)]);\n  birthYearCtrl = this.fb.control<number | null>(null, [\n    Validators.required,\n    Validators.min(1900),\n    Validators.max(new Date().getFullYear())\n  ]);\n  passwordCtrl = this.fb.control('', [Validators.required]);\n  confirmPasswordCtrl = this.fb.control('', [Validators.required]);\n  // Password group\n  passwordGroup = this.fb.group(\n    {\n      password: this.passwordCtrl,\n      confirmPassword: this.confirmPasswordCtrl\n    },\n    {\n      validators: RegisterComponent.passwordMatch\n    }\n  );\n\n  userForm = this.fb.group({\n    login: this.loginCtrl,\n    birthYear: this.birthYearCtrl,\n    passwordForm: this.passwordGroup\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private router: Router\n  ) {}\n\n  static passwordMatch(formGroup: FormGroup) {\n    const password = formGroup.get('password')!.value;\n    const confirmPassword = formGroup.get('confirmPassword')!.value;\n    return password !== confirmPassword ? { matchingError: true } : null;\n  }\n\n  register() {\n    const formValue = this.userForm.value;\n\n    this.userService.register(formValue.login!, formValue.passwordForm.password!, formValue.birthYear!).subscribe({\n      next: () => this.router.navigateByUrl('/'),\n      error: () => (this.registrationFailed = true)\n    });\n  }\n}\n","usedDeprecatedRules":[]}]